@using VideoPlayer_EasierCS.Models
@model List<VideoPlayer_EasierCS.Models.Video>
@{
    var currentVideo = (Video)ViewBag.CurrentVideo;
    var nextVideoId = (int)ViewBag.NextVideoId;
}

<div class="video-player-container">
    <div class="video-wrapper">
        <canvas id="videoCanvas" width="640" height="360"></canvas>
        <video id="sourceVideo" style="display: none">
            <source src="@currentVideo.FilePath" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    </div>

    <div class="effects-panel">
        <h4>Video Effects</h4>
        <div class="effects-list">
            <button class="effect-button" onclick="videoEffects.setEffect(0)">No Effect</button>
            @foreach (var effect in ViewBag.AvailableEffects)
            {
                <button class="effect-button" onclick="videoEffects.setEffect(@effect.Id)"
                        title="@effect.Description">
                    @effect.Name
                </button>
            }
        </div>
    </div>

    <div class="upload-section"
         ondragover="event.preventDefault()"
         ondrop="handleDrop(event)">

        <form id="uploadForm" method="post" enctype="multipart/form-data">
            <input type="file"
                   id="videoFile"
                   name="file"
                   accept="video/*"
                   style="display: none"
                   onchange="handleFileSelect(this)"/>

            <button type="button"
                    onclick="document.getElementById('videoFile').click()"
                    class="btn btn-primary">
                Select Video
            </button>
        </form>

        <div class="drop-zone">
            Drag and drop video files here
        </div>
    </div>

    <div class="playlist-controls">
        @using (Html.BeginForm("PlayPrevious", "VideoPlayer", FormMethod.Post, new { style = "display: inline;" }))
        {
            <input type="hidden" name="currentVideoId" value="@currentVideo.Id"/>
            <button type="submit" class="btn btn-primary">Previous</button>
        }

        @using (Html.BeginForm("PlayNext", "VideoPlayer", FormMethod.Post, new { style = "display: inline;" }))
        {
            <input type="hidden" name="currentVideoId" value="@currentVideo.Id"/>
            <button type="submit" class="btn btn-primary">Next</button>
        }
    </div>

    <div class="playlist" id="videoPlaylist">
        @foreach (var video in Model)
        {
            <div class="playlist-item @(video.Id == currentVideo.Id ? "active" : "")"
                 data-id="@video.Id"
                 data-order="@video.OrderIndex">
                <div class="drag-handle">⋮⋮</div>
                <span class="video-title" onclick="window.location.href='@Url.Action("Index", new { currentVideoId = video.Id })'">
                    @video.Title
                </span>
                <button class="delete-btn" onclick="deleteVideo(@video.Id)">×</button>
            </div>
        }
    </div>
</div>

<style>

    .video-wrapper {
        position: relative;
        width: 100%;
        background: #000;
    }

    #videoCanvas {
        width: 100%;
        height: auto;
        display: block;
    }

    #sourceVideo {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 2; 
        opacity: 1; 
    }
    
 
    .playlist-item {
        display: flex;
        align-items: center;
        padding: 10px;
        margin: 5px 0;
        background-color: #f8f9fa;
        border-radius: 4px;
        cursor: default;
    }

    .drag-handle {
        cursor: move;
        padding: 0 10px;
        color: #666;
        font-weight: bold;
        user-select: none;
    }

    .video-title {
        flex-grow: 1;
        margin: 0 10px;
    }

    .delete-btn {
        background: none;
        border: none;
        color: #dc3545;
        font-size: 1.2em;
        cursor: pointer;
        padding: 0 10px;
    }

    .delete-btn:hover {
        color: #c82333;
    }

    .playlist-item.dragging {
        opacity: 0.5;
    }

    .playlist-item.drag-over {
        border-top: 2px solid #007bff;
    }
 

    .effects-panel {
        background: #f5f5f5;
        padding: 1rem;
        border-radius: 4px;
    }

    .effects-list {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .effect-button {
        padding: 0.5rem 1rem;
        background: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .effect-button:hover {
        background: #0056b3;
    }
</style>
<script src="/js/VideoEffects.js"></script>

<script>
  


        async function uploadFile(file) {
        const formData = new FormData();
        formData.append('file', file);

        try {
        const response = await fetch('@Url.Action("UploadVideo", "VideoPlayer")', {
        method: 'POST',
        body: formData
    });

        if (!response.ok) {
        throw new Error('Upload failed');
    }

        const result = await response.json();
        if (result.success) {
        window.location.reload();
    }
    } catch (error) {
        alert('Error uploading file: ' + error.message);
    }
    }

        function handleFileSelect(input) {
        if (input.files && input.files[0]) {
        uploadFile(input.files[0]);
    }
    }

        function handleDrop(event) {
        event.preventDefault();
        event.currentTarget.classList.remove('drag-over');

        const files = event.dataTransfer.files;
        if (files && files[0]) {
        uploadFile(files[0]);
    }
    }

        document.querySelector('.drop-zone').addEventListener('dragenter', function(e) {
        e.preventDefault();
        this.classList.add('drag-over');
    });

        document.querySelector('.drop-zone').addEventListener('dragleave', function(e) {
        e.preventDefault();
        this.classList.remove('drag-over');
    });

    let draggingElement = null;

    document.addEventListener('DOMContentLoaded', function() {
        const playlist = document.getElementById('videoPlaylist');
        const items = playlist.getElementsByClassName('playlist-item');

        for (const item of items) {
            const handle = item.querySelector('.drag-handle');

            handle.addEventListener('mousedown', function(e) {
                draggingElement = item;
                item.classList.add('dragging');

                e.preventDefault();
            });
        }

        document.addEventListener('mousemove', function(e) {
            if (!draggingElement) return;

            const playlist = document.getElementById('videoPlaylist');
            const items = [...playlist.getElementsByClassName('playlist-item')];

            items.forEach(item => item.classList.remove('drag-over'));

            const hoverItem = items.find(item => {
                if (item === draggingElement) return false;
                const rect = item.getBoundingClientRect();
                return e.clientY >= rect.top && e.clientY <= rect.bottom;
            });

            if (hoverItem) {
                hoverItem.classList.add('drag-over');
            }
        });

            document.addEventListener('mouseup', async function() {
                if (!draggingElement) return;

                const hoverItem = document.querySelector('.drag-over');
                if (hoverItem) {
                    const playlist = document.getElementById('videoPlaylist');
                    const items = [...playlist.getElementsByClassName('playlist-item')];

                    if (items.indexOf(draggingElement) < items.indexOf(hoverItem)) {
                        hoverItem.parentNode.insertBefore(draggingElement, hoverItem.nextSibling);
                    } else {
                        hoverItem.parentNode.insertBefore(draggingElement, hoverItem);
                    }

                    const updates = [...playlist.getElementsByClassName('playlist-item')].map((item, index) => ({
                        id: parseInt(item.dataset.id),
                        newOrder: index
                    }));

                    try {
                        const response = await fetch('@Url.Action("UpdateOrder", "VideoPlayer")', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(updates)
                        });

                        const result = await response.json();
                        if (!result.success) {
                            window.location.reload();
                        }
                    } catch (error) {
                        console.error('Error updating order:', error);
                        window.location.reload();
                    }
                }

                draggingElement.classList.remove('dragging');
                document.querySelector('.drag-over')?.classList.remove('drag-over');
                draggingElement = null;
            });
    });

    function deleteVideo(id) {
        if (confirm('Are you sure you want to delete this video?')) {
            fetch('@Url.Action("DeleteVideo", "VideoPlayer")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ id: id })
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        window.location.reload();
                    } else {
                        alert('Error deleting video: ' + result.message);
                    }
                });
        }
    }

        document.addEventListener('DOMContentLoaded', function() {
            const video = document.getElementById('sourceVideo');
            const canvas = document.getElementById('videoCanvas');
            let nextVideoId = @nextVideoId;

            video.addEventListener('ended', function() {
                window.location.href = '@Url.Action("Index", "VideoPlayer")?currentVideoId=' + nextVideoId;
            });

            window.videoEffects = new VideoEffects(video, canvas);

            video.play().catch(e => console.log('Auto-play prevented:', e));
        });
</script>